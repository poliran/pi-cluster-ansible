---
- name: Create web root directory
  ansible.builtin.file:
    path: /var/www/html
    state: directory
    owner: www-data
    group: www-data
    mode: "0755"
  tags:
    - angular
    - deploy

- name: Create simple Angular dashboard
  ansible.builtin.copy:
    content: |
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Pi Cluster Dashboard</title>
          <style>
              body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
              .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 10px; padding: 30px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
              .header { text-align: center; margin-bottom: 30px; }
              .cluster-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
              .server-card { background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; transition: transform 0.2s; }
              .server-card:hover { transform: translateY(-2px); box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
              .status-online { color: #28a745; font-weight: bold; }
              .status-offline { color: #dc3545; font-weight: bold; }
              .refresh-btn { background: #007bff; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; font-size: 16px; }
              .refresh-btn:hover { background: #0056b3; }
              .loading { text-align: center; color: #666; }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>ðŸ¥§ Raspberry Pi Cluster Dashboard</h1>
                  <p>Real-time monitoring of your Pi cluster infrastructure</p>
                  <button class="refresh-btn" onclick="loadClusterStatus()">Refresh Status</button>
                  <p><small>Last updated: <span id="lastUpdate">Never</span></small></p>
              </div>
              
              <div id="loading" class="loading">Loading cluster status...</div>
              <div id="clusterGrid" class="cluster-grid" style="display: none;"></div>
              <div id="loadBalanceStats" style="margin-top: 30px; padding: 20px; background: #e9ecef; border-radius: 5px; display: none;"></div>
          </div>

          <script>
              let servers = [];
              
              async function loadClusterStatus() {
                  document.getElementById('loading').style.display = 'block';
                  document.getElementById('clusterGrid').style.display = 'none';
                  document.getElementById('loadBalanceStats').style.display = 'none';
                  
                  servers = [];
                  
                  // Make multiple requests to test load balancing
                  for (let i = 0; i < 10; i++) {
                      try {
                          const response = await fetch('/api/');
                          const data = await response.json();
                          servers.push(data);
                      } catch (error) {
                          console.error('Error fetching server status:', error);
                      }
                  }
                  
                  displayResults();
                  document.getElementById('lastUpdate').textContent = new Date().toLocaleString();
              }
              
              function displayResults() {
                  document.getElementById('loading').style.display = 'none';
                  
                  if (servers.length === 0) {
                      document.getElementById('clusterGrid').innerHTML = '<p style="text-align: center; color: #666;">No server responses received. Check your backend services.</p>';
                      document.getElementById('clusterGrid').style.display = 'block';
                      return;
                  }
                  
                  // Get unique servers
                  const uniqueServers = new Map();
                  servers.forEach(server => {
                      if (!uniqueServers.has(server.server) || 
                          new Date(server.timestamp) > new Date(uniqueServers.get(server.server).timestamp)) {
                          uniqueServers.set(server.server, server);
                      }
                  });
                  
                  // Display server cards
                  const grid = document.getElementById('clusterGrid');
                  grid.innerHTML = '';
                  
                  uniqueServers.forEach(server => {
                      const card = document.createElement('div');
                      card.className = 'server-card';
                      card.innerHTML = `
                          <h3>Server: ${server.server}</h3>
                          <p><strong>Status:</strong> 
                              <span class="${server.database === 'connected' ? 'status-online' : 'status-offline'}">
                                  ${server.database === 'connected' ? 'Online' : 'Offline'}
                              </span>
                          </p>
                          <p><strong>Uptime:</strong> ${server.uptime}</p>
                          <p><strong>Database:</strong> ${server.database}</p>
                          <p><strong>Last Response:</strong> ${new Date(server.timestamp).toLocaleString()}</p>
                          <p><em>${server.message}</em></p>
                      `;
                      grid.appendChild(card);
                  });
                  
                  // Display load balancing stats
                  const stats = document.getElementById('loadBalanceStats');
                  const serverCounts = {};
                  servers.forEach(server => {
                      serverCounts[server.server] = (serverCounts[server.server] || 0) + 1;
                  });
                  
                  let statsHtml = '<h4>Load Balancing Test Results</h4>';
                  statsHtml += `<p>Total requests made: ${servers.length}</p>`;
                  Object.entries(serverCounts).forEach(([serverName, count]) => {
                      statsHtml += `<p><strong>${serverName}:</strong> ${count} requests</p>`;
                  });
                  
                  stats.innerHTML = statsHtml;
                  stats.style.display = 'block';
                  grid.style.display = 'grid';
              }
              
              // Auto-refresh every 10 seconds
              setInterval(loadClusterStatus, 10000);
              
              // Initial load
              loadClusterStatus();
          </script>
      </body>
      </html>
    dest: /var/www/html/index.html
    owner: www-data
    group: www-data
    mode: "0644"
  notify: restart nginx
  tags:
    - angular
    - deploy
